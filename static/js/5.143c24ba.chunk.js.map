{"version":3,"sources":["views/factory/GPUTable.js","views/factory/GPUChart.js","config/chartconfig.js","services/Service.js","views/factory/Dashboard.js"],"names":["Td","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","props","idx","react_default","a","createElement","className","col","total","parseFloat","toFixed","Component","Tr","_Component2","_this","row","map","GPUTable_Td","GPUTable","_Component3","tableData","factory_report","totalData","total_report","data-sort","GPUTable_Tr","GPUChart","call","componentDidMount","chartObj","chart","current","showLoading","componentDidUpdate","prevProps","prevState","loading","hideLoading","React","createRef","highcharts_react_min_default","highcharts","Highcharts","options","ref","emptyChartConfig","backgroundColor","events","load","labelStyle","fontStyle","color","multiBarConfig","type","height","plotOptions","line","marker","enabled","symbol","radius","states","hover","legend","xAxis","labels","style","categories","crosshair","yAxis","min","allowDecimals","title","text","opposite","gridLineWidth","series","api","window","getAPI","getFactoryTestData","console","log","factorydata","boxHeight","genHeight","wh","innerHeight","Dashboard","setState","httpLoading","result","setTimeout","state","factory_total","energyChart","getMultiBarConfig","cpuChart","genSeries","data","rp","tp","re","name","nameMap","te","v","fill","item","empty","newchart","assign","1","2","4","5","9","10","ecc","energyTitle","cpuTitle","dist_default","show","factory_GPUChart","factory_GPUTable"],"mappings":"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","file":"static/js/5.143c24ba.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport class Td extends Component {\n  render() {\n    if(this.props.idx === 0){\n        return <td className=\"text-center sm\"> {this.props.col} </td>\n    }else{\n      return this.props.total ? \n        this.props.idx === 6 ?\n        <td className=\"text-center sm\"> {(parseFloat(this.props.col)*100).toFixed(2) + '%'} </td> :\n        <td className=\"text-center sm\"> {this.props.col.toFixed(2)} </td> :\n       <td className=\"text-center sm\"> {this.props.col.toFixed(2)} </td>;\n        \n    }\n    \n  }\n  \n};\n\nexport class Tr extends Component {\n  render() {\n    return (\n        <tr>\n          { this.props.row.map((col, idx) => \n              <Td col={col} idx={idx} key={idx} total={this.props.total} />\n            )}\n        </tr>\n    )\n  }\n  \n};\n\n\nexport class GPUTable extends Component {\n  render() {\n    const tableData = this.props.factory_report;\n    const totalData = this.props.total_report;\n    return (\n        <table className=\"footable table table-bordered table-hover\" data-sort=\"false\"  >\n            <thead>\n                <tr >\n                    <th className=\"text-center\">用能单位</th>\n                    <th className=\"text-center\">实际能耗-KWh</th>\n                    <th className=\"text-center\">理论能耗-KWh</th>\n                    <th className=\"text-center\">产量</th>\n                    <th className=\"text-center\">实际单耗-KWh</th>\n                    <th className=\"text-center\">理论单耗-KWh</th>\n                    <th className=\"text-center\">实际单耗表现状态</th>\n                </tr>\n                \n            </thead>\n            <tbody>\n              { \n                tableData.map((row, idx) => \n                  <Tr row={ row } key={ idx } />\n                )\n              }\n            </tbody>\n            <tfoot className=\"hide-if-no-paging\">\n              { \n                totalData.map((row, idx) => \n                  <Tr row={ row } key={ idx } total={true} />\n                )\n              }\n            </tfoot>\n        </table>\n    )\n  }\n}\n\nexport default GPUTable\n","import React, { Component } from 'react'\nimport Highcharts from 'highcharts'\nimport HighchartsReact from 'highcharts-react-official'\n\nexport class GPUChart extends Component {\n    constructor(props) {\n      super(props)\n      this.chart = React.createRef();\n    }\n\n    componentDidMount = () => {\n        this.chartObj = this.chart.current.chart;\n        this.chartObj.showLoading();\n    }\n\n    componentDidUpdate = (prevProps, prevState) => {\n      if(this.props.loading){\n          this.chartObj.showLoading();\n      }else{\n          this.chartObj.hideLoading();\n      }\n    }\n    \n\n  render() {\n    return (\n      <div>\n        <HighchartsReact\n            highcharts={Highcharts}\n            options={this.props.options}\n            ref={this.chart}\n        />\n      </div>\n    )\n  }\n}\n\nexport default GPUChart\n","export const emptyChartConfig = {\n\n    chart: {\n        backgroundColor: 'transparent',\n        events: {\n            load() {\n                // this.showLoading();\n            }\n        }\n    },\n    loading: {\n        labelStyle: {\n            fontStyle: 'italic',\n            color: \"blue\"\n        }\n    },\n}\n\nexport const multiBarConfig = {\n    chart: {\n        type: 'column',\n        height: 400,\n        backgroundColor: 'transparent',\n        events: {\n            load() {\n                // this.hideLoading.bind(this);\n            }\n        }\n    },\n    plotOptions: {\n        line: {\n            marker: {\n                enabled: false,\n                symbol: 'circle',\n                radius: 2,\n                states: {\n                    hover: {\n                        enabled: true\n                    }\n                }\n            }\n        }\n    },\n    legend: {\n        enabled: false\n    },\n    xAxis: {\n        labels: {\n            style: {\n                color: 'white'\n            }\n        },\n        categories: [],\n        crosshair: true\n    },\n    yAxis: [{\n        labels: {\n            style: {\n                color: 'white'\n            }\n        },\n        crosshair: true\n    }, {\n        min: 0,\n        allowDecimals: true,\n        title: {\n            text: null,\n        },\n        labels: {\n            style: {\n                color: \"white\"\n            }\n        },\n        opposite: true,\n        // visible:false,\n        gridLineWidth: 0\n    }],\n\n    series: []\n};","import factorydata from './factorydata.json';\nimport shopdata from './shopdata.json';\n\nexport const api = window.getAPI();\n\nexport const getFactoryGPU = async (query) => {\n  let base = \"factorygpu\";\n  let url = `${api}${base}/3/from/${query.start}/to/${query.end}`;\n  // url = 'https://jsonplaceholder.typicode.com/todos/101';\n  let res = await fetch(url);\n  if(res.ok && res.status === 200){\n    try{\n      return await res.json()\n    }\n    catch(e){\n      console.log(e)\n    }\n  }else{\n    console.log(res)\n  }\n\n  // fetch(url).then(\n  //   res => res.json(),\n  //   error  => console.log(error)\n  // ).then(\n  //   (result) => {\n  //     console.log(result)\n  //   },\n  //   (error) => {\n  //     console.log(error)\n  //   }\n  // )\n}\n\nexport const getShopGPU = async (query) => {\n  let base = \"shopgpu\";\n  let url = `${api}${base}/${query.id}/from/${query.start}/to/${query.end}`;\n  let res = await fetch(url);\n  if(res.ok && res.status === 200){\n    try{\n      return await res.json()\n    }\n    catch(e){\n      console.log(e)\n    }\n  }else{\n    console.log(res)\n  }\n}\n\nexport const getFactoryTestData = () => {\n  console.log(api);\n  return factorydata;\n}\n\nexport const getShopTestData = () => {\n  return shopdata;\n}\n\n\n","import React, { Component } from 'react';\nimport Loading from 'react-loading-bar';\nimport GPUTable from './GPUTable';\nimport GPUChart from './GPUChart';\nimport { emptyChartConfig, multiBarConfig } from '../../config/chartconfig';\nimport { getFactoryGPU, getFactoryTestData } from '../../services/Service';\n\nlet boxHeight = 400;\nconst genHeight = () => {\n  let wh = window.innerHeight;\n  if(wh >950){\n    boxHeight = 450;\n  }else if (wh >750) {\n    boxHeight = 400;\n  }else {\n    boxHeight = 350\n  }\n}\n\nclass Dashboard extends Component {\n\n  constructor(props) {\n    super(props)\n\n    this.nameMap = {\n      \"1\":\"实际能耗\",\n      \"2\":\"理论能耗\",\n      \"4\":\"实际单耗\",\n      \"5\":\"理论单耗\",\n      \"9\":\"实际产量\",\n      \"10\":\"理论产量\"\n    };\n\n    genHeight()\n\n    let ecc = Object.assign({}, emptyChartConfig, {chart:{height:boxHeight,backgroundColor:\"transparent\"}} )\n  \n    this.state = {\n       httpLoading: false,\n       energyTitle: \"实际能耗-理论能耗-对比图-kwh\",\n       cpuTitle: \"实际单耗-理论单耗-对比图-kwh\",\n       loading: true,\n       factory_report:[],\n       total_report:[],\n       energyChart: ecc,\n       cpuChart: ecc\n    }\n  }\n\n  componentDidMount = () => {\n    let query = {\n\t\t\tstart: '2018-11-15',\n\t\t\tend: '2018-11-16'\n    };\n    if(false){\n      this.setState({httpLoading:true});\n      getFactoryGPU(query).then(result => {\n        console.log( result)\n        this.setState((state, props) => {\n          return {\n            loading:false,\n            factory_report: result.factory_report,\n            total_report: result.factory_total,\n            energyChart: this.getMultiBarConfig(result[\"factory_report\"],\n              [1, 2],\n              result['real_product_count'],\n              result['theoretical_product_count']),\n            cpuChart: this.getMultiBarConfig(result['factory_report'],\n              [4, 5])\n          }\n        })\n        this.setState({httpLoading:false});\n      })\n      \n    }else{\n      this.setState({httpLoading:true});\n      let result = getFactoryTestData()\n      setTimeout(() => {\n        this.setState((state, props) => {\n          return {\n            loading:false,\n            factory_report: result.factory_report,\n            total_report: result.factory_total,\n            energyChart: this.getMultiBarConfig(result[\"factory_report\"],\n              [1, 2],\n              result['real_product_count'],\n              result['theoretical_product_count']),\n            cpuChart: this.getMultiBarConfig(result['factory_report'],\n              [4, 5])\n          }\n        })\n        this.setState({httpLoading:false});\n      }, 3000);\n    }\n  }\n  \n\n  genSeries = (data,key,rp,tp) => {\n    let rpd = {}, tpd = {};\n\t\tlet re = {\"name\":this.nameMap[key[0]], \n\t\t\t\t  \"data\":data.map( value => value[key[0]])};\n\t\tlet te = {\"name\":this.nameMap[key[1]], \n\t\t\t\t  \"data\":data.map(value => value[key[1]])};\n\t\tif(rp && tp){\n\t\t\trpd = {\n\t\t\t\t\"name\":this.nameMap[9],\n\t\t\t\t\"data\":data.map(v => v[0]).fill(rp),\n\t\t\t\t\"type\":\"line\",\n\t\t\t\t\"yAxis\":1\n\t\t\t};\n\t\t\ttpd = {\n\t\t\t\t\"name\":this.nameMap[10],\n\t\t\t\t\"data\":data.map(v => v[0]).fill(tp),\n\t\t\t\t\"type\":\"line\",\n\t\t\t\t\"yAxis\":1\n\t\t\t};\n\t\t\treturn [re,te,rpd, tpd];\n\t\t}else{\n\t\t\treturn [re,te];\n\t\t}\n  }\n\n  getMultiBarConfig = (item, key, rp, tp, empty) => {\n    let newchart = Object.assign({}, multiBarConfig);\n    newchart.chart.height = boxHeight;\n\t\tnewchart.series = this.genSeries(item,key, rp, tp);\n\t\tnewchart.xAxis.categories = item.map( v => v[0]);\n\t\treturn newchart;\n  }\n  \n  \n  render() {\n    return (\n      <div>\n        <Loading\n          show={ this.state.httpLoading }\n          color=\"#29d\"\n        />\n          <div className=\"row chart-box\">\n            <div className=\"col-lg-4 col-md-4 col-sm-12\">\n                <div className=\"panel panel-warning dashboard\">\n                    <div className=\"panel-heading dashboard\">\n                        { this.state.energyTitle }\n                    </div>\n                    <div className=\"panel-body\">\n                      <GPUChart \n                        options= { this.state.energyChart }\n                        loading={ this.state.loading } />\n                    </div>\n                </div>\n            </div>\n            \n            <div className=\"col-lg-offset-4 col-md-offset-4 col-lg-4 col-md-4 col-sm-12\">\n                <div className=\"panel panel-warning dashboard\">\n                    <div className=\"panel-heading dashboard\">\n                        { this.state.cpuTitle }\n                    </div>\n                    <div className=\"panel-body\">\n                      <GPUChart \n                        options={ this.state.cpuChart }\n                        loading={ this.state.loading } />\n                    </div>\n                </div>\n            </div>\n            \n\n          </div>\n          \n          <div className=\"row\">\n            <div className=\"panel panel-default\">\n                <div className=\"panel-body\">\n                  <GPUTable factory_report={ this.state.factory_report } total_report={ this.state.total_report } />\n                </div>\n            </div>\n          </div>\n          \n      </div>\n    )\n  }\n}\n\nexport default Dashboard\n\n"],"sourceRoot":""}